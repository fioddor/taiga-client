[{"project": 361447, "project_extra_info": {"name": "Linker", "slug": "alastairduncan-aggregator", "logo_small_url": null, "id": 361447}, "is_watcher": false, "total_watchers": 0, "id": 109055, "slug": "setting-up-solr", "content": "# INSTALLING SOLR\n\nSolr is the search engine software used to store and search the index of datasets and publications. Firstly, you need to download Solr using wget, and install it as follows:\n\n```bash\ncd /opt/ \nsudo wget apache.org/dist/lucene/solr/5.5.4/solr-5.5.4.tgz\nsudo tar xzf solr-5.5.4.tgz solr-5.5.4/bin/install_solr_service.sh --strip-components=2\nsudo bash ./install_solr_service.sh solr-5.5.4.tgz \n# Also, install the required core to the /opt/solr/server/solr directory.\nsudo service solr start\n```\n\nBefore starting Solr, you need to provide a core file- this will determine the format of the records being stored in Solr. An example core is downloadable at the bottom of this page.\n\n```bash\nsudo tar xzf elinks.tgz /opt/solr/server/solr/\n```\n\nIn addition, you may wish to expose the port Solr is running on, so it can be debugged from a web browser. You only need to do this if running Solr on a separate machine (such as a VM), and it probably shouldn't be available when the service is in production.\n\n```bash\nsudo iptables -A INPUT -p tcp -m tcp --dport 8983 -j ACCEPTServerName elinks01.scd.rl.ac.uk\n```", "owner": 150610, "last_modifier": 150610, "created_date": "2017-11-21T15:40:37Z", "modified_date": "2017-12-06T10:42:01Z", "html": "<h1 id=\"installing-solr\">INSTALLING SOLR</h1>\n<p>Solr is the search engine software used to store and search the index of datasets and publications. Firstly, you need to download Solr using wget, and install it as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">cd</span> /opt/ \nsudo wget apache.org/dist/lucene/solr/5.5.4/solr-5.5.4.tgz\nsudo tar xzf solr-5.5.4.tgz solr-5.5.4/bin/install_solr_service.sh --strip-components<span class=\"o\">=</span><span class=\"m\">2</span>\nsudo bash ./install_solr_service.sh solr-5.5.4.tgz \n<span class=\"c1\"># Also, install the required core to the /opt/solr/server/solr directory.</span>\nsudo service solr start\n</pre></div>\n\n\n<p>Before starting Solr, you need to provide a core file- this will determine the format of the records being stored in Solr. An example core is downloadable at the bottom of this page.</p>\n<div class=\"codehilite\"><pre><span></span>sudo tar xzf elinks.tgz /opt/solr/server/solr/\n</pre></div>\n\n\n<p>In addition, you may wish to expose the port Solr is running on, so it can be debugged from a web browser. You only need to do this if running Solr on a separate machine (such as a VM), and it probably shouldn't be available when the service is in production.</p>\n<div class=\"codehilite\"><pre><span></span>sudo iptables -A INPUT -p tcp -m tcp --dport <span class=\"m\">8983</span> -j ACCEPTServerName elinks01.scd.rl.ac.uk\n</pre></div>", "editions": 5, "version": 4}, {"project": 361447, "project_extra_info": {"name": "Linker", "slug": "alastairduncan-aggregator", "logo_small_url": null, "id": 361447}, "is_watcher": false, "total_watchers": 0, "id": 109056, "slug": "setting-up-the-elinks-vm", "content": "# Linker VM Setup\n\nThis page details how the eLinks VM was set up. The VM can be found at [elinks01.scd.rl.ac.uk](http://elinks01.scd.rl.ac.uk). Since the VM runs CentOS instead of Ubuntu, 'yum' is used to install new packages. If you are unfamiliar with CentOS, it works in a similar way to 'apt-get' on Ubuntu.\n\nNote that this page was written in retrospect, after the initial setup was already done. If something doesn't work, then it is almost certainly because these instructions are incorrect. Ask someone else on the team for help- at the time or writing, Alan or Alastair.\n\n## Overview\n\nThe eLinks web service has a number of components. Here is an overview of each, with a more detailed section for each step below.\n\nThe eLinks web service has a number of components. Here is an overview of each, linking to a more detailed section.\n\n*   [Salt](/project/alastairduncan-aggregator/wiki/setting-up-salt): This is a server configuration management software. A central server (the salt master) is able to manage and configure a number of other servers (salt minions). The department already has a salt master available, so all you need to do is set up a salt minion on the eLinks server and connect it to the salt master.\n\n*   [Jetty](https://tree.taiga.io/project/alastairduncan-aggregator/wiki/setting-up-jetty): Jetty is an HTTP web server and servlet container. Essentially, this is the software that makes web pages available, and allows them to interact with Java 'backing beans'.\n\n*   [Solr](https://tree.taiga.io/project/alastairduncan-aggregator/wiki/setting-up-solr): Solr is an open source search engine application. It maintains an index of all works known to it, and allows users to search the index by any required field.\n\n*   [The Indexer](https://tree.taiga.io/project/alastairduncan-aggregator/wiki/setting-up-the-indexer): This is a standalone java application which is able to perform the initial indexing of the ePubs works. The linker will keep the index up to date over time, but when it is first set up, it will need to be made aware of the existing works.\n\n*   [The Linker](setting-up-the-linker): Finally, setup up the webapp itself.", "owner": 150610, "last_modifier": 150610, "created_date": "2017-11-21T12:08:07Z", "modified_date": "2017-12-06T10:02:00Z", "html": "<h1 id=\"linker-vm-setup\">Linker VM Setup</h1>\n<p>This page details how the eLinks VM was set up. The VM can be found at <a href=\"http://elinks01.scd.rl.ac.uk\" target=\"_blank\">elinks01.scd.rl.ac.uk</a>. Since the VM runs CentOS instead of Ubuntu, 'yum' is used to install new packages. If you are unfamiliar with CentOS, it works in a similar way to 'apt-get' on Ubuntu.</p>\n<p>Note that this page was written in retrospect, after the initial setup was already done. If something doesn't work, then it is almost certainly because these instructions are incorrect. Ask someone else on the team for help- at the time or writing, Alan or Alastair.</p>\n<h2 id=\"overview\">Overview</h2>\n<p>The eLinks web service has a number of components. Here is an overview of each, with a more detailed section for each step below.</p>\n<p>The eLinks web service has a number of components. Here is an overview of each, linking to a more detailed section.</p>\n<ul>\n<li>\n<p><a href=\"https://tree.taiga.io/project/alastairduncan-aggregator/wiki/setting-up-salt\">Salt</a>: This is a server configuration management software. A central server (the salt master) is able to manage and configure a number of other servers (salt minions). The department already has a salt master available, so all you need to do is set up a salt minion on the eLinks server and connect it to the salt master.</p>\n</li>\n<li>\n<p><a href=\"https://tree.taiga.io/project/alastairduncan-aggregator/wiki/setting-up-jetty\">Jetty</a>: Jetty is an HTTP web server and servlet container. Essentially, this is the software that makes web pages available, and allows them to interact with Java 'backing beans'.</p>\n</li>\n<li>\n<p><a href=\"https://tree.taiga.io/project/alastairduncan-aggregator/wiki/setting-up-solr\">Solr</a>: Solr is an open source search engine application. It maintains an index of all works known to it, and allows users to search the index by any required field.</p>\n</li>\n<li>\n<p><a href=\"https://tree.taiga.io/project/alastairduncan-aggregator/wiki/setting-up-the-indexer\">The Indexer</a>: This is a standalone java application which is able to perform the initial indexing of the ePubs works. The linker will keep the index up to date over time, but when it is first set up, it will need to be made aware of the existing works.</p>\n</li>\n<li>\n<p><a class=\"reference wiki\" href=\"https://tree.taiga.io/project/alastairduncan-aggregator/wiki/setting-up-the-linker\">The Linker</a>: Finally, setup up the webapp itself.</p>\n</li>\n</ul>", "editions": 20, "version": 20}, {"project": 361447, "project_extra_info": {"name": "Linker", "slug": "alastairduncan-aggregator", "logo_small_url": null, "id": 361447}, "is_watcher": false, "total_watchers": 0, "id": 109057, "slug": "setting-up-the-indexer", "content": "# Linker Installation\n\nFinally, install the linker itself. First, copy the war file for the linker into the directory /opt/jetty-base/webapps. Then, install the config required. Copy the config directory /opt/aggregator from mrcdss01 to the VM as /opt/elinks/.", "owner": 150610, "last_modifier": 150610, "created_date": "2017-11-21T15:41:18Z", "modified_date": "2017-11-21T15:41:18Z", "html": "<h1 id=\"linker-installation\">Linker Installation</h1>\n<p>Finally, install the linker itself. First, copy the war file for the linker into the directory /opt/jetty-base/webapps. Then, install the config required. Copy the config directory /opt/aggregator from mrcdss01 to the VM as /opt/elinks/.</p>", "editions": 1, "version": 1}, {"project": 361447, "project_extra_info": {"name": "Linker", "slug": "alastairduncan-aggregator", "logo_small_url": null, "id": 361447}, "is_watcher": false, "total_watchers": 0, "id": 109058, "slug": "setting-up-the-linker", "content": "# Install the Linker\n\nThe first step is making the webapp available to Jetty. If you don't have a .war file for the webapp available, you'll need to download and build the code as explained [here](elinks-code). The .war should be in the target directory of your workspace, and needs to be copied to the webapps directory of jetty base.\n\n```bash\n#Example\nsudo cp ~/workspace/elinks/target/z-repo-aggregator-0.0.1-SNAPSHOT.war /opt/jetty-base/webapps/.\n```\n\nYou also need to install the config required. An example config directory is available below. Extract it in /opt/ to create the config directory. Some of the files in /opt/elinks/config have missing password fields- you'll need to find all the missing fields and fill them in with details specific to your setup.\n\n```bash\ncd /opt/\nsudo tar xvzf ~/elinks-conf.tar.gz\n```", "owner": 150610, "last_modifier": 150610, "created_date": "2017-12-06T10:13:46Z", "modified_date": "2017-12-06T14:47:13Z", "html": "<h1 id=\"install-the-linker\">Install the Linker</h1>\n<p>The first step is making the webapp available to Jetty. If you don't have a .war file for the webapp available, you'll need to download and build the code as explained <a class=\"reference wiki\" href=\"https://tree.taiga.io/project/alastairduncan-aggregator/wiki/elinks-code\">here</a>. The .war should be in the target directory of your workspace, and needs to be copied to the webapps directory of jetty base.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#Example</span>\nsudo cp ~/workspace/elinks/target/z-repo-aggregator-0.0.1-SNAPSHOT.war /opt/jetty-base/webapps/.\n</pre></div>\n\n\n<p>You also need to install the config required. An example config directory is available below. Extract it in /opt/ to create the config directory. Some of the files in /opt/elinks/config have missing password fields- you'll need to find all the missing fields and fill them in with details specific to your setup.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">cd</span> /opt/\nsudo tar xvzf ~/elinks-conf.tar.gz\n</pre></div>", "editions": 3, "version": 2}, {"project": 361447, "project_extra_info": {"name": "Linker", "slug": "alastairduncan-aggregator", "logo_small_url": null, "id": 361447}, "is_watcher": false, "total_watchers": 0, "id": 109059, "slug": "testing-with-junit", "content": "# Testing with JUnit\n\n## How to run the tests\n\nThe eLinks code uses the JUnit framework for testing. The tests can be found in /src/test/java/. These tests will be run whenever the project is built, to detect problems as early as possible. The tests can be run in several ways:\n\n*   Eclipse: If you are using Eclipse as an IDE, you can run the tests from there. In the navigator panel (should be on the left hand side), find the test you want to run. Right click, then select 'Run as>JUnit Test'. The test should run in a new panel. To run all the tests, go to the pom.xml file in the workspace, right click, then select 'Run as>Maven Install'.\n*   Bash: The following commands can run the tests.\n\n```bash\n#Run a specific test\nmvn -Dtest=TestSetupDBandSolr test\n\n#Rebuild the project, run all tests\nmvn install\n\n#Rebuild the project without running tests (saves a lot of time)\nmvn install -DskipTests\n\n#Run a test without rebuilding the database\nmvn -Dtest=TestSetupDBandSolr -DskipDatabaseRefresh=true test\n```\n\n## Database Rebuilding\n\nBy default, most of the tests will completely wipe and rebuild the database and Solr index. This is useful because the tests run more reliably against a clean slate- a leftover entry from manual testing won't cause false errors to be reported in the tests.\n\nHowever, it does take a lot of time, so you may wish to disable it in certain cases. Passing the flag -DskipDatabaseRefresh=true causes the database refresh to be skipped. A good strategy is to disable the rebuilding in Eclipse, so the tests can be run quickly while making changes, then run the entire test suite with database rebuilding before committing any code changes.\n\nTo enable the flag for a test in Eclipse, right click the test, go to 'Run as>Run configurations', and add the flag in the arguments tab under VM arguments.\n\n![](https://media.taiga.io/attachments/7/1/6/c/c387e5cafde8221ac866361ef521b9cb2f4cb96b42be9adf38000a72b3ed/run-configurations-skip.png \"Example of how to set skip database refresh tag\")", "owner": 150610, "last_modifier": 150610, "created_date": "2017-12-05T14:10:53Z", "modified_date": "2017-12-11T09:48:33Z", "html": "<h1 id=\"testing-with-junit\">Testing with JUnit</h1>\n<h2 id=\"how-to-run-the-tests\">How to run the tests</h2>\n<p>The eLinks code uses the JUnit framework for testing. The tests can be found in /src/test/java/. These tests will be run whenever the project is built, to detect problems as early as possible. The tests can be run in several ways:</p>\n<ul>\n<li>Eclipse: If you are using Eclipse as an IDE, you can run the tests from there. In the navigator panel (should be on the left hand side), find the test you want to run. Right click, then select 'Run as&gt;JUnit Test'. The test should run in a new panel. To run all the tests, go to the pom.xml file in the workspace, right click, then select 'Run as&gt;Maven Install'.</li>\n<li>Bash: The following commands can run the tests.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#Run a specific test</span>\nmvn -Dtest<span class=\"o\">=</span>TestSetupDBandSolr <span class=\"nb\">test</span>\n\n<span class=\"c1\">#Rebuild the project, run all tests</span>\nmvn install\n\n<span class=\"c1\">#Rebuild the project without running tests (saves a lot of time)</span>\nmvn install -DskipTests\n\n<span class=\"c1\">#Run a test without rebuilding the database</span>\nmvn -Dtest<span class=\"o\">=</span>TestSetupDBandSolr -DskipDatabaseRefresh<span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"nb\">test</span>\n</pre></div>\n\n\n<h2 id=\"database-rebuilding\">Database Rebuilding</h2>\n<p>By default, most of the tests will completely wipe and rebuild the database and Solr index. This is useful because the tests run more reliably against a clean slate- a leftover entry from manual testing won't cause false errors to be reported in the tests.</p>\n<p>However, it does take a lot of time, so you may wish to disable it in certain cases. Passing the flag -DskipDatabaseRefresh=true causes the database refresh to be skipped. A good strategy is to disable the rebuilding in Eclipse, so the tests can be run quickly while making changes, then run the entire test suite with database rebuilding before committing any code changes.</p>\n<p>To enable the flag for a test in Eclipse, right click the test, go to 'Run as&gt;Run configurations', and add the flag in the arguments tab under VM arguments.</p>\n<p><img alt=\"\" src=\"https://media.taiga.io/attachments/7/1/6/c/c387e5cafde8221ac866361ef521b9cb2f4cb96b42be9adf38000a72b3ed/run-configurations-skip.png\"></p>", "editions": 5, "version": 4}, {"project": 361447, "project_extra_info": {"name": "Linker", "slug": "alastairduncan-aggregator", "logo_small_url": null, "id": 361447}, "is_watcher": false, "total_watchers": 0, "id": 109060, "slug": "testing-with-selenium", "content": "# Testing with Selenium\n\nSelenium is a tool used to automate web browser testing. A firefox extension is available, which provides an IDE which can record the user's interaction with the browser, and play back the sequence of steps, and there\u00a0 is also a Python library, which eLinks uses for web interface testing.\n\nThe code is available at /src/test/python. [SetUtils.py](http://SetUtils.py) provides a utility class which wraps the selenium library, leading to intuitive, readable test scripts. Running the test is simply a case of running the script from the command line. The following options are available to the script:\n\n```\n-s Slow mode: makes the test execute at a human readable pace\n-d Debug mode: outputs logs from the test\n-i Invisible mode: hides the browser window off screen\n```\n\nWhen writing a new test, a possible strategy is to use the firefox extension IDE to run through the steps manually on a browser, export the test in Python, and use this as a reference. It will give the IDs used for each element, and also can show how to handle an unfamiliar web element in Python. The IDE cannot perform checks, however, so any content checking will have to be manually added later.\n\n## Setting Up Selenium\n\n1\\. First, install pip. This is a package manager for Python- similar to the role 'apt-get' performs for linux.\n\n```\nsudo apt-get install pip\n```\n\n2\\. Use pip to get the selenium modules:\n\n```\nsudo pip install selenium\n```\n\n3\\. Install Chrome for ubuntu. This should be available from Ubuntu Software Centre, or just downloading from the Chrome website.\n\n4\\. Download ChromeDriver from [sites.google.com/a/chromium.org/chromedriver/downloads](https://sites.google.com/a/chromium.org/chromedriver/downloads), put it in /usr/bin\n\n## Why Python, Not Java\n\nYou may note that a series of selenium tests were created as part of the JUnit tests, and are no longer used. There were several reasons for switching to Python.\n\nFirstly, having the tests as part of the JUnit suite was inconvenient, because maven only builds the new version of the webapp, and doesn't actually deploy it. As a result, it was very common to make code changes, run the tests, and see a high number of failures in the selenium tests, because they were run against an old version of the code. Having the selenium tests exist as a separate entity makes a lot more sense.\n\nSecondly, making the tests available in Python made them an ideal project for work experience students to work on. It's a common language for GCSE/A-Level students to have a basic understanding of, and should be really easy to set up on their first day.", "owner": 150610, "last_modifier": 150610, "created_date": "2017-12-05T15:31:51Z", "modified_date": "2017-12-11T10:07:05Z", "html": "<h1 id=\"testing-with-selenium\">Testing with Selenium</h1>\n<p>Selenium is a tool used to automate web browser testing. A firefox extension is available, which provides an IDE which can record the user's interaction with the browser, and play back the sequence of steps, and there\u00a0 is also a Python library, which eLinks uses for web interface testing.</p>\n<p>The code is available at /src/test/python. <a href=\"http://SetUtils.py\" target=\"_blank\">SetUtils.py</a> provides a utility class which wraps the selenium library, leading to intuitive, readable test scripts. Running the test is simply a case of running the script from the command line. The following options are available to the script:</p>\n<div class=\"codehilite\"><pre><span></span>-s Slow mode: makes the test execute at a human readable pace\n-d Debug mode: outputs logs from the test\n-i Invisible mode: hides the browser window off screen\n</pre></div>\n\n\n<p>When writing a new test, a possible strategy is to use the firefox extension IDE to run through the steps manually on a browser, export the test in Python, and use this as a reference. It will give the IDs used for each element, and also can show how to handle an unfamiliar web element in Python. The IDE cannot perform checks, however, so any content checking will have to be manually added later.</p>\n<h2 id=\"setting-up-selenium\">Setting Up Selenium</h2>\n<p>1. First, install pip. This is a package manager for Python- similar to the role 'apt-get' performs for linux.</p>\n<div class=\"codehilite\"><pre><span></span>sudo apt-get install pip\n</pre></div>\n\n\n<p>2. Use pip to get the selenium modules:</p>\n<div class=\"codehilite\"><pre><span></span>sudo pip install selenium\n</pre></div>\n\n\n<p>3. Install Chrome for ubuntu. This should be available from Ubuntu Software Centre, or just downloading from the Chrome website.</p>\n<p>4. Download ChromeDriver from <a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads\" target=\"_blank\">sites.google.com/a/chromium.org/chromedriver/downloads</a>, put it in /usr/bin</p>\n<h2 id=\"why-python-not-java\">Why Python, Not Java</h2>\n<p>You may note that a series of selenium tests were created as part of the JUnit tests, and are no longer used. There were several reasons for switching to Python.</p>\n<p>Firstly, having the tests as part of the JUnit suite was inconvenient, because maven only builds the new version of the webapp, and doesn't actually deploy it. As a result, it was very common to make code changes, run the tests, and see a high number of failures in the selenium tests, because they were run against an old version of the code. Having the selenium tests exist as a separate entity makes a lot more sense.</p>\n<p>Secondly, making the tests available in Python made them an ideal project for work experience students to work on. It's a common language for GCSE/A-Level students to have a basic understanding of, and should be really easy to set up on their first day.</p>", "editions": 6, "version": 6}]